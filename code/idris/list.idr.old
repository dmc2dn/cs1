module list_nat

import nat
import pair

data list_nat = nil | cons nat list_nat

l0: list_nat
l0 = nil

l1: list_nat
l1 = cons O nil

l2: list_nat
l2 = (cons (S O) (cons (S (S O)) nil))

l3: list_nat
l3 = (cons (S O) (cons (S (S O)) (cons (S (S (S O))) nil)))

lengthp: list_nat -> nat
lengthp nil = O
lengthp (cons n l') = S (length l')

len_13: nat
len_13 = length l3

{-
length l3
length (cons (S O) (cons (S (S O)) cons (S (S (S O))) nil))
S (length cons (S (S O)) (cons (S (S (S O))) nil))
S (S (length (cons (S (S (S O))) nil)))
S (S (S (length nil)))
S (S (S O))
-}

appendp: pair list_nat list_nat -> list_nat
appendp (mkPair nil a) = a
appendp (mkPair (cons n m) a) = cons n (append (mkPair m a))
